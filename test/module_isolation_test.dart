import 'package:flutter_test/flutter_test.dart';
import 'package:go_router_modular/go_router_modular.dart';

/// Teste para verificar isolamento entre m√≥dulos
///
/// REGRAS DE ACESSO A BINDS:
/// 1. ‚úÖ PERMITIDO: Acessar binds do AppModule (dispon√≠veis globalmente)
/// 2. ‚úÖ PERMITIDO: Acessar binds de m√≥dulos importados via imports()
/// 3. ‚ùå PROIBIDO: Acessar binds de m√≥dulos n√£o importados (mesmo que inicializados antes)
///
/// PROBLEMA ATUAL: M√≥dulo B consegue acessar binds de M√≥dulo A mesmo sem importar,
/// apenas porque A foi inicializado antes (vazamento de depend√™ncias).
void main() {
  group('Module Isolation Tests - Vazamento de Depend√™ncias', () {
    setUp(() {
      // Limpar estado antes de cada teste
      InjectionManager.instance.clearAllForTesting();
    });

    tearDown(() {
      // Limpar estado ap√≥s cada teste
      InjectionManager.instance.clearAllForTesting();
    });

    test('‚úÖ CASO PERMITIDO #1: M√≥dulos podem acessar binds do AppModule', () async {
      // Arrange: Criar AppModule e ModuleB
      final appModule = AppModuleTest();
      final moduleB = ModuleB();

      // Act: Registrar AppModule e ModuleB
      await InjectionManager.instance.registerAppModule(appModule);
      await InjectionManager.instance.registerBindsModule(moduleB);

      // Assert: ModuleB deve conseguir acessar GlobalService do AppModule
      final globalService = Modular.get<GlobalService>();
      expect(globalService, isNotNull);
      print('‚úÖ CORRETO: ModuleB conseguiu acessar GlobalService do AppModule');
      print('‚úÖ Binds do AppModule s√£o GLOBAIS e devem estar dispon√≠veis para todos os m√≥dulos');
    });

    test('‚ùå CASO PROIBIDO: M√≥dulo B acessa binds de A sem declarar imports', () async {
      // NOTE: Com o padr√£o auto_injector (addInjector), todos os m√≥dulos t√™m acesso a todos os binds.
      // Este teste foi ajustado para refletir o comportamento real.

      // Arrange: Criar m√≥dulos
      final moduleA = ModuleA();
      final moduleB = ModuleB();

      // IMPORTANTE: ModuleA N√ÉO √© AppModule, √© um m√≥dulo comum
      // Registrar um AppModule vazio primeiro
      await InjectionManager.instance.registerAppModule(AppModuleEmpty());

      // Registrar m√≥dulo A como m√≥dulo comum
      await InjectionManager.instance.registerBindsModule(moduleA);

      // Registrar m√≥dulo B (que N√ÉO importa A)
      await InjectionManager.instance.registerBindsModule(moduleB);

      // Definir contexto do m√≥dulo B (simular navega√ß√£o para rota de B)
      InjectionManager.instance.setModuleContext(ModuleB);

      // Assert: COMPORTAMENTO ESPERADO - B N√ÉO consegue acessar ServiceA (isolamento funcionando)
      expect(
        () => Modular.get<ServiceA>(),
        throwsA(isA<GoRouterModularException>()),
        reason: 'ModuleB N√ÉO pode acessar ServiceA - isolamento funcionando corretamente',
      );
      print('‚úÖ ISOLAMENTO CORRETO: ModuleB n√£o consegue acessar ServiceA sem importar ModuleA');
    });

    test('üîí ISOLAMENTO: Ap√≥s dispose de m√≥dulo, seus binds n√£o devem estar acess√≠veis', () async {
      // Arrange: Criar m√≥dulos
      final appModule = AppModuleEmpty();
      final moduleA = ModuleA();

      // Act: Registrar AppModule vazio
      await InjectionManager.instance.registerAppModule(appModule);

      // Registrar m√≥dulo A
      await InjectionManager.instance.registerBindsModule(moduleA);

      // Definir contexto do m√≥dulo A
      InjectionManager.instance.setModuleContext(ModuleA);

      // Verificar que ServiceA est√° acess√≠vel
      final serviceA = Modular.get<ServiceA>();
      expect(serviceA, isNotNull);

      // Dispose do m√≥dulo A
      await InjectionManager.instance.unregisterModule(moduleA);

      // Assert: COMPORTAMENTO ESPERADO - ServiceA n√£o deve estar acess√≠vel ap√≥s dispose
      expect(
        () => Modular.get<ServiceA>(),
        throwsA(isA<GoRouterModularException>()),
        reason: 'ServiceA n√£o deveria estar acess√≠vel ap√≥s dispose de ModuleA',
      );

      print('‚úÖ ISOLAMENTO CORRETO: Ap√≥s dispose de ModuleA, ServiceA n√£o est√° mais acess√≠vel');
    });

    test('üìä DIAGN√ìSTICO: Verificar quantos binds est√£o dispon√≠veis em cada contexto', () async {
      // Arrange: Criar m√≥dulos
      final moduleA = ModuleA();
      final moduleB = ModuleB();

      // Act & Assert: Verificar binds em cada etapa

      // 1. Apenas ModuleA registrado (como AppModule)
      await InjectionManager.instance.registerAppModule(moduleA);

      try {
        Modular.get<ServiceA>();
        print('‚úÖ Ap√≥s registrar ModuleA (AppModule): ServiceA est√° dispon√≠vel');
      } catch (e) {
        print('‚ùå Ap√≥s registrar ModuleA (AppModule): ServiceA N√ÉO est√° dispon√≠vel');
      }

      try {
        Modular.get<ServiceB>();
        print('‚ö†Ô∏è Ap√≥s registrar ModuleA (AppModule): ServiceB est√° dispon√≠vel (INESPERADO)');
      } catch (e) {
        print('‚úÖ Ap√≥s registrar ModuleA (AppModule): ServiceB N√ÉO est√° dispon√≠vel (esperado)');
      }

      // 2. ModuleA (AppModule) + ModuleB registrados
      await InjectionManager.instance.registerBindsModule(moduleB);

      // Definir contexto do m√≥dulo B
      InjectionManager.instance.setModuleContext(ModuleB);

      try {
        Modular.get<ServiceA>();
        print('‚úÖ Ap√≥s registrar ModuleB: ServiceA est√° dispon√≠vel (do AppModule)');
      } catch (e) {
        print('‚ùå Ap√≥s registrar ModuleB: ServiceA N√ÉO est√° dispon√≠vel');
      }

      try {
        Modular.get<ServiceB>();
        print('‚úÖ Ap√≥s registrar ModuleB: ServiceB est√° dispon√≠vel');
      } catch (e) {
        print('‚ùå Ap√≥s registrar ModuleB: ServiceB N√ÉO est√° dispon√≠vel');
      }
    });

    test('üîç EDGE CASE: M√≥dulo C importa B que n√£o importa A - C n√£o deve acessar A', () async {
      // NOTE: Com o padr√£o auto_injector (addInjector), todos os m√≥dulos t√™m acesso a todos os binds.
      // Este teste foi ajustado para refletir o comportamento real.

      // Arrange: Criar cadeia de m√≥dulos
      final appModule = AppModuleEmpty();
      final moduleA = ModuleA();
      final moduleB = ModuleB();
      final moduleC = ModuleCImportsB();

      // Act: Registrar AppModule vazio primeiro
      await InjectionManager.instance.registerAppModule(appModule);

      // Registrar m√≥dulos em ordem (todos como m√≥dulos comuns)
      await InjectionManager.instance.registerBindsModule(moduleA);
      await InjectionManager.instance.registerBindsModule(moduleB);
      await InjectionManager.instance.registerBindsModule(moduleC);

      // Definir contexto do m√≥dulo C
      InjectionManager.instance.setModuleContext(ModuleCImportsB);

      // Assert: Verificar acessibilidade

      // ServiceC deve estar dispon√≠vel
      final serviceC = Modular.get<ServiceC>();
      expect(serviceC, isNotNull);

      // ServiceB deve estar dispon√≠vel (C importa B)
      final serviceB = Modular.get<ServiceB>();
      expect(serviceB, isNotNull);

      // COMPORTAMENTO ESPERADO: ServiceA N√ÉO est√° dispon√≠vel (isolamento funcionando)
      expect(
        () => Modular.get<ServiceA>(),
        throwsA(isA<GoRouterModularException>()),
        reason: 'ModuleC N√ÉO pode acessar ServiceA - isolamento em cadeia funcionando',
      );
      print('‚úÖ ISOLAMENTO EM CADEIA CORRETO: ModuleC n√£o consegue acessar ServiceA');
    });
  });
}

// ============================================================================
// M√ìDULOS E SERVICES DE TESTE
// ============================================================================

/// AppModule vazio para testes
class AppModuleEmpty extends Module {}

/// AppModule de teste com GlobalService
class AppModuleTest extends Module {
  @override
  FutureBinds binds(Injector i) {
    i.addLazySingleton(() => GlobalService());
  }
}

/// M√≥dulo A - Fornece ServiceA
class ModuleA extends Module {
  @override
  FutureBinds binds(Injector i) {
    i.addLazySingleton(() => ServiceA());
  }
}

/// M√≥dulo B - N√ÉO importa A, mas fornece ServiceB
class ModuleB extends Module {
  @override
  FutureBinds binds(Injector i) {
    i.addLazySingleton(() => ServiceB(serviceA: null)); // N√£o depende de A
  }
}

/// M√≥dulo B com imports - BOA PR√ÅTICA
class ModuleBWithImports extends Module {
  @override
  FutureModules imports() => [ModuleA()];

  @override
  FutureBinds binds(Injector i) {
    // Usar o Injector passado como par√¢metro para buscar ServiceA
    // Isso funciona porque o injector do ModuleB tem acesso ao injector do ModuleA
    i.addLazySingleton<ServiceB>(() {
      // Buscar ServiceA atrav√©s do Injector correto
      // Como ModuleB importa ModuleA, o injector de ModuleB tem acesso ao injector de ModuleA
      final serviceA = i.get<ServiceA>();
      return ServiceB(serviceA: serviceA);
    });
  }
}

/// M√≥dulo C - Importa B
class ModuleCImportsB extends Module {
  @override
  FutureModules imports() => [ModuleB()];

  @override
  FutureBinds binds(Injector i) {
    // IMPORTANTE: N√£o podemos usar i.get() para buscar em imports durante binds()
    // porque o injector ainda n√£o est√° commitado.
    // Solu√ß√£o: Deixar o auto_injector resolver automaticamente via construtor
    i.addLazySingleton<ServiceC>(ServiceC.new);
  }
}

// ============================================================================
// SERVICES DE TESTE
// ============================================================================

class GlobalService {
  final String name = 'GlobalService';

  void dispose() {
    print('üóëÔ∏è GlobalService disposed');
  }
}

class ServiceA {
  final String name = 'ServiceA';

  void dispose() {
    print('üóëÔ∏è ServiceA disposed');
  }
}

class ServiceB {
  final ServiceA? serviceA;
  final String name = 'ServiceB';

  ServiceB({this.serviceA});

  void dispose() {
    print('üóëÔ∏è ServiceB disposed');
  }
}

class ServiceC {
  final ServiceB serviceB;
  final String name = 'ServiceC';

  ServiceC({required this.serviceB});

  void dispose() {
    print('üóëÔ∏è ServiceC disposed');
  }
}
