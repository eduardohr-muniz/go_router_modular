import 'dart:async';
import 'package:flutter/material.dart';
import 'package:go_router_modular/go_router_modular.dart';
import '../shared/shared_module.dart';
import 'domain/repositories/user_repository.dart';
import 'presenters/user_page.dart';
import 'presenters/user_name_page.dart';

class UserModule extends Module {
  // Controle de estado do m√≥dulo
  bool _isInitialized = false;
  Timer? _userTimer;
  StreamSubscription? _userSubscription;

  @override
  List<Module> get imports {
    print('üì¶ [USER_MODULE] Obtendo imports');
    return [SharedModule()];
  }

  @override
  List<Bind<Object>> get binds {
    print('üì¶ [USER_MODULE] Obtendo binds');
    return [
      Bind.singleton<IUserRepository>((i) => UserRepository()),
    ];
  }

  @override
  List<ModularRoute> get routes {
    print('üõ£Ô∏è [USER_MODULE] Obtendo rotas');
    return [
      ChildRoute(
        '/',
        child: (context, state) => const UserPage(),
      ),
      ChildRoute(
        '/user_name/:name',
        child: (context, state) {
          final name = state.pathParameters['name'] ?? 'Usu√°rio';
          return UserNamePage(userName: name);
        },
      ),
    ];
  }

  @override
  void initState(Injector i) {
    print('üöÄ [USER_MODULE] initState chamado');

    if (_isInitialized) {
      print('‚ö†Ô∏è [USER_MODULE] M√≥dulo j√° inicializado');
      return;
    }

    try {
      // Obt√©m o UserRepository injetado
      final userRepository = i.get<IUserRepository>();
      print('üë§ [USER_MODULE] UserRepository obtido: ${userRepository.runtimeType}');

      // Simula configura√ß√£o de listeners de usu√°rio
      _setupUserListeners();

      // Simula carregamento de dados de usu√°rio
      _loadUserData();

      // Simula configura√ß√£o de permiss√µes
      _setupUserPermissions();

      _isInitialized = true;
      print('‚úÖ [USER_MODULE] UserModule inicializado com sucesso');
    } catch (e) {
      print('‚ùå [USER_MODULE] Erro na inicializa√ß√£o: $e');
      rethrow;
    }
  }

  @override
  void dispose() {
    print('üóëÔ∏è [USER_MODULE] dispose chamado');

    if (!_isInitialized) {
      print('‚ö†Ô∏è [USER_MODULE] M√≥dulo n√£o estava inicializado');
      return;
    }

    try {
      // Cancela timer de usu√°rio
      _userTimer?.cancel();
      _userTimer = null;
      print('‚è∞ [USER_MODULE] Timer de usu√°rio cancelado');

      // Cancela subscription de usu√°rio
      _userSubscription?.cancel();
      _userSubscription = null;
      print('üì° [USER_MODULE] Subscription de usu√°rio cancelado');

      // Simula limpeza de dados de usu√°rio
      _clearUserData();

      // Simula fechamento de conex√µes de usu√°rio
      _closeUserConnections();

      _isInitialized = false;
      print('‚úÖ [USER_MODULE] UserModule disposto com sucesso');
    } catch (e) {
      print('‚ùå [USER_MODULE] Erro na disposi√ß√£o: $e');
      rethrow;
    }
  }

  // M√©todos de exemplo para demonstrar inicializa√ß√£o
  void _setupUserListeners() {
    print('üîß [USER_MODULE] Configurando listeners de usu√°rio');
    // Simula configura√ß√£o de listeners
  }

  void _loadUserData() {
    print('üìä [USER_MODULE] Carregando dados de usu√°rio');
    // Simula carregamento de dados
  }

  void _setupUserPermissions() {
    print('üîê [USER_MODULE] Configurando permiss√µes de usu√°rio');
    // Simula configura√ß√£o de permiss√µes
  }

  // M√©todos de exemplo para demonstrar limpeza
  void _clearUserData() {
    print('üßπ [USER_MODULE] Limpando dados de usu√°rio');
    // Simula limpeza de dados
  }

  void _closeUserConnections() {
    print('üîå [USER_MODULE] Fechando conex√µes de usu√°rio');
    // Simula fechamento de conex√µes
  }
}

class UserService {
  UserService() {
    print('üë§ UserService criado');
  }

  void dispose() {
    print('üë§ UserService disposto');
  }
}
