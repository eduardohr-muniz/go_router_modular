import 'dart:async';
import 'package:flutter/material.dart';
import 'package:go_router_modular/go_router_modular.dart';
import '../shared/shared_module.dart';
import 'auth_store.dart';
import 'pages/login_page.dart';
import 'pages/splash_page.dart';

class AuthModule extends Module {
  // Controle de estado do m√≥dulo
  bool _isInitialized = false;
  Timer? _authTimer;
  StreamSubscription? _authSubscription;

  @override
  List<Module> get imports {
    print('üì¶ [AUTH_MODULE] Obtendo imports');
    return [SharedModule()];
  }

  @override
  List<Bind<Object>> get binds {
    print('üì¶ [AUTH_MODULE] Obtendo binds');
    return [Bind.singleton<AuthStore>((i) => AuthStore())];
  }

  @override
  List<ModularRoute> get routes {
    print('üõ£Ô∏è [AUTH_MODULE] Obtendo rotas');
    return [
      ChildRoute(
        '/',
        child: (context, state) => const SplashPage(),
      ),
      ChildRoute(
        '/login',
        child: (context, state) => const LoginPage(),
      ),
    ];
  }

  @override
  void initState(Injector i) {
    print('üöÄ [AUTH_MODULE] initState chamado');

    if (_isInitialized) {
      print('‚ö†Ô∏è [AUTH_MODULE] M√≥dulo j√° inicializado');
      return;
    }

    try {
      // Obt√©m o AuthStore injetado
      final authStore = i.get<AuthStore>();
      print('üîê [AUTH_MODULE] AuthStore obtido: ${authStore.runtimeType}');

      // Simula configura√ß√£o de listeners de autentica√ß√£o
      _setupAuthListeners();

      // Simula carregamento de configura√ß√µes
      _loadAuthConfig();

      // Simula verifica√ß√£o de token salvo
      _checkSavedToken();

      _isInitialized = true;
      print('‚úÖ [AUTH_MODULE] AuthModule inicializado com sucesso');
    } catch (e) {
      print('‚ùå [AUTH_MODULE] Erro na inicializa√ß√£o: $e');
      rethrow;
    }
  }

  @override
  void dispose() {
    print('üóëÔ∏è [AUTH_MODULE] dispose chamado');

    if (!_isInitialized) {
      print('‚ö†Ô∏è [AUTH_MODULE] M√≥dulo n√£o estava inicializado');
      return;
    }

    try {
      // Cancela timer de autentica√ß√£o
      _authTimer?.cancel();
      _authTimer = null;
      print('‚è∞ [AUTH_MODULE] Timer de autentica√ß√£o cancelado');

      // Cancela subscription de autentica√ß√£o
      _authSubscription?.cancel();
      _authSubscription = null;
      print('üì° [AUTH_MODULE] Subscription de autentica√ß√£o cancelado');

      // Simula limpeza de dados tempor√°rios
      _clearTempAuthData();

      // Simula fechamento de conex√µes
      _closeAuthConnections();

      _isInitialized = false;
      print('‚úÖ [AUTH_MODULE] AuthModule disposto com sucesso');
    } catch (e) {
      print('‚ùå [AUTH_MODULE] Erro na disposi√ß√£o: $e');
      rethrow;
    }
  }

  // M√©todos de exemplo para demonstrar inicializa√ß√£o
  void _setupAuthListeners() {
    print('üîß [AUTH_MODULE] Configurando listeners de autentica√ß√£o');
    // Simula configura√ß√£o de listeners
  }

  void _loadAuthConfig() {
    print('‚öôÔ∏è [AUTH_MODULE] Carregando configura√ß√µes de autentica√ß√£o');
    // Simula carregamento de configura√ß√µes
  }

  void _checkSavedToken() {
    print('üîç [AUTH_MODULE] Verificando token salvo');
    // Simula verifica√ß√£o de token
  }

  // M√©todos de exemplo para demonstrar limpeza
  void _clearTempAuthData() {
    print('üßπ [AUTH_MODULE] Limpando dados tempor√°rios de autentica√ß√£o');
    // Simula limpeza de dados
  }

  void _closeAuthConnections() {
    print('üîå [AUTH_MODULE] Fechando conex√µes de autentica√ß√£o');
    // Simula fechamento de conex√µes
  }
}
