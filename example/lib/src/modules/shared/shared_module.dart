import 'package:flutter/material.dart';
import 'package:go_router_modular/go_router_modular.dart';
import 'shared_service.dart';

class SharedModule extends Module {
  // Controle de estado do m√≥dulo
  final bool _isInitialized = false;

  @override
  List<Bind<Object>> get binds {
    print('üì¶ [SHARED_MODULE] Obtendo binds');
    return [
      Bind.singleton<SharedService>((i) => SharedService()),
    ];
  }

  @override
  void initState(Injector i) {
    print('init home module');
  }

  @override
  void dispose() {
    print('dispose home module');
  }

  // M√©todos de exemplo para demonstrar inicializa√ß√£o
  void _setupSharedServices() {
    print('üîß [SHARED_MODULE] Configurando servi√ßos compartilhados');
    // Simula configura√ß√£o de servi√ßos
  }

  void _loadGlobalConfig() {
    print('‚öôÔ∏è [SHARED_MODULE] Carregando configura√ß√µes globais');
    // Simula carregamento de configura√ß√µes
  }

  // M√©todos de exemplo para demonstrar limpeza
  void _cleanupSharedServices() {
    print('üßπ [SHARED_MODULE] Limpando servi√ßos compartilhados');
    // Simula limpeza de servi√ßos
  }

  void _cleanupGlobalConfig() {
    print('üóëÔ∏è [SHARED_MODULE] Limpando configura√ß√µes globais');
    // Simula limpeza de configura√ß√µes
  }
}
