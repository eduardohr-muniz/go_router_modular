{"/":{"title":"GoRouter Modular","data":{"":"Simplifying Flutter development with modular architecture 🧩GoRouter Modular is a powerful package that extends the capabilities of GoRouter by adding modular architecture patterns, dependency injection, event system, and much more to your Flutter applications.","-features#✨ Features":"🧩 Modular Architecture - Organize your app into independent, reusable modules\n💉 Dependency Injection - Built-in DI system for better testability and maintainability\n📡 Event System - Decoupled communication between modules\n🛣️ Advanced Routing - Enhanced routing capabilities with module support\n🔄 State Management - Integrated state management solutions\n🎯 Type Safety - Full TypeScript/Dart type safety throughout","-quick-start#🚀 Quick Start":"","-documentation#📚 Documentation":"Explore our comprehensive documentation to get started:\nGetting Started - Learn the basics\nInstallation - Setup instructions\nQuick Start - Get up and running quickly\nDependency Injection - Master the DI system\nEvent System - Understand module communication\nRoutes - Advanced routing patterns","-why-gorouter-modular#🌟 Why GoRouter Modular?":"Traditional Flutter apps can become complex and hard to maintain as they grow. GoRouter Modular solves this by:\nBreaking down complexity into manageable, independent modules\nImproving testability through dependency injection\nEnhancing maintainability with clear separation of concerns\nBoosting developer productivity with powerful abstractions\nEnsuring scalability as your app grows","️-built-with#🛠️ Built With":"Flutter - UI toolkit\nGoRouter - Declarative routing\nGetIt - Service locator\nRiverpod - State management","-license#📄 License":"This project is licensed under the MIT License - see the LICENSE file for details.","-contributing#🤝 Contributing":"Contributions are welcome! Please feel free to submit a Pull Request.","-support#📞 Support":"📧 Email: your-email@example.com\n🐛 Issues: GitHub Issues\n💬 Discussions: GitHub Discussions\nGet Started →"}},"/installation":{"title":"📦 Installation","data":{"":"Add GoRouter Modular to your Flutter project in just a few steps.","add-dependencies#Add Dependencies":"Add the following to your pubspec.yaml file:\nor","install-packages#Install Packages":"","import-in-dart-files#Import in Dart Files":"","platform-support#Platform Support":"GoRouter Modular works on all Flutter platforms:\nPlatform\tSupport\tStatus\t📱 Mobile\tiOS & Android\t✅ Full Support\t🌐 Web\tProgressive Web Apps\t✅ Full Support\t🖥️ Desktop\tWindows, macOS, Linux\t✅ Full Support\t\n:::tip 🎉 Success!\nIf the test passes, GoRouter Modular is installed correctly and ready to use!\n::::::info 🚀 Next Steps\nNow that you have GoRouter Modular installed, let's create your first modular application!\n::::::note 📚 Related Documentation\nCheck out the next topics to learn more:\n:::"}},"/quick-start":{"title":"🚀 Quick Start","data":{"":"Get your modular Flutter app running in minutes!","1----installation#1 -  Installation":"Add the dependencies to your pubspec.yaml:","2---create-app-module--and-home-module#2 - Create App Module  and Home Module":"Create your main app module:","3---create-app-widget#3 - Create App Widget":"Set up your app widget:","4---configure-main#4 - Configure Main":"Initialize the modular system:","-whats-next#🎯 What's Next?":"📁 Project Structure - Learn about recommended folder organization\n💉 Dependency Injection - Master the DI system\n🛣️ Routes - Understand routing concepts\n🎭 Event System - Build decoupled communication"}},"/event-system":{"title":"🎭 Event System","data":{"":"The Event System is designed to enable decoupled communication between modules. This means one module can notify or trigger actions in another module without direct dependencies, making your app more modular and maintainable.","-why-use-events#✨ Why Use Events?":"Decouple features: modules don't need to know about each other\nCentralize cross-cutting actions (navigation, notifications, etc)\nFacilitate micro frontend/team-based architectures","-typical-use-cases#🚦 Typical Use Cases":"","1-auth-redirect-after-login#1. Auth: Redirect after login":"When a user logs in, the Auth module can fire an event to notify other modules (or the app shell) to redirect to a specific page:","2-dio-exception-refreshtokenexpired--redirect-to-login#2. Dio Exception: RefreshTokenExpired → Redirect to login":"Quando uma exceção de token expirado ocorre em qualquer módulo, um evento pode ser disparado para redirecionar o usuário para a tela de login, sem acoplamento entre módulos:","-event-flow-example#🔄 Event Flow Example":"","-creating-event-modules#🚀 Creating Event Modules":"","basic-event-module#Basic Event Module":"","event-with-data#Event with Data":"","-global-events#🌐 Global Events":"","register-global-listeners#Register Global Listeners":"","module-specific-events#Module-Specific Events":"","-context-aware-events#🎯 Context-Aware Events":"","navigatorcontext-usage#NavigatorContext Usage":"","why-context-can-be-null#Why Context Can Be Null":"The NavigatorContext can be null when:\nThe event is fired before any widget is built\nThe module is not currently active in the navigation stack\nThe event is fired from a background service","-event-communication-patterns#🔄 Event Communication Patterns":"","request-response-pattern#Request-Response Pattern":"","broadcast-pattern#Broadcast Pattern":"","-micro-frontend-example#🧩 Micro Frontend Example":"","e-commerce-architecture#E-commerce Architecture":"","cart-module-team-a#Cart Module (Team A)":"","product-module-team-b#Product Module (Team B)":"","payment-module-team-c#Payment Module (Team C)":"","-advanced-event-patterns#🎨 Advanced Event Patterns":"","event-with-validation#Event with Validation":"","event-chaining#Event Chaining":"","️-best-practices#🛡️ Best Practices":"","1-event-naming#1. Event Naming":"","2-event-data#2. Event Data":"","-related-topics#📚 Related Topics":"🏗️ Project Structure - Organize your modules\n💉 Dependency Injection - Manage dependencies\n🛣️ Routes - Navigation between modules"}},"/getting-started":{"title":"🚀 Getting Started","data":{"":"Build your first modular Flutter application step by step. This tutorial will guide you through creating a complete app with multiple modules, dependency injection, and event communication.","-project-structure#📁 Project Structure":"We'll create a well-organized project structure:","1---create-the-app-module#1-  Create the App Module":"The App Module is the root of your application that orchestrates all other modules:","2---create-the-home-module#2 - Create the Home Module":"","3---create-the-app-widget#3 - Create the App Widget":"","4---configure-main#4 - Configure Main":"","-run-your-app#🎉 Run Your App":"Now run your application:\nYou should see:\n🏠 Home page with a welcome message and load data functionality\n🔄 Smooth navigation between modules\n💉 Dependency injection working seamlessly","-what-youve-achieved#✨ What You've Achieved":"Congratulations! You've just created:\n✅ Modular architecture with separate concerns\n✅ Dependency injection with shared services\n✅ Clean navigation between modules\n✅ Scalable structure ready for team development\n✅ Reactive UI with controllers and state management","-next-steps#🚀 Next Steps":"Now that you have a working modular app, explore these advanced features:\n🎭 Event System - Communication between modules\n🎯 Loader System - Custom loading indicators\n🔒 Routes - Route protection and navigation\n:::tip 💡 Pro Tip\nKeep your modules focused on a single responsibility. This makes your app easier to maintain and allows teams to work independently on different features.\n:::Ready to add event communication between modules? Let's explore the Event System! 🎭"}},"/routes":{"title":"🛣️ Routes","data":{"":"GoRouter Modular provides seamless integration with GoRouter for powerful, type-safe navigation.","-route-types#🚀 Route Types":"","child-routes---simple-page-routes#Child Routes - Simple page routes":"","module-routes---nested-modules#Module Routes - Nested modules":"","shell-routes---shared-layouts#Shell Routes - Shared layouts":"","-navigation#🧭 Navigation":"","basic-navigation#Basic Navigation":"","navigation-with-parameters#Navigation with Parameters":"","-route-parameters#📋 Route Parameters":"","path-parameters#Path Parameters":"","query-parameters#Query Parameters":"","-async-navigation#🔄 Async Navigation":"","loading-states#Loading States":""}}}